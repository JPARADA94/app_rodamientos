# -*- coding: utf-8 -*-
"""app_rodamientos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15sNpizGLj5m3KgxuqXb4LFBe9iSLROhP
"""

# app_rodamientos.py
# Selector de grasa para rodamientos usando el método SKF

# 1. Importamos librerías necesarias
import streamlit as st            # Para la interfaz web
from fpdf import FPDF             # Para generar el PDF de resultados
import numpy as np                # Para cálculos matemáticos (interpolación, potencias)

# 2. Definimos constantes según la fórmula de SKF
A_SKF = 0.7    # Constante A de la fórmula de viscosidad
B_SKF = 0.23   # Exponente B de la fórmula de viscosidad

# Umbrales para elegir el grado de consistencia NLGI
# Según el factor Ks = DN / viscosidad_base
NLGI_THRESHOLDS = [
    (80,   "3"),
    (160,  "2"),
    (240,  "1"),
    (np.inf, "0"),
]

# Ajustes de viscosidad según la carga de trabajo
LOAD_FACTORS = {
    "Baja": 1.0,
    "Media": 1.2,
    "Alta": 1.5,
}

# 3. Funciones auxiliares

def calc_Dm(d, D):
    """Calcula el diámetro medio Dm en mm"""
    return (d + D) / 2

def calc_DN(n, Dm):
    """Calcula DN = velocidad (RPM) × diámetro medio (mm)"""
    return n * Dm

def calc_base_viscosity(DN):
    """
    Calcula la viscosidad base (cSt @40 °C) usando
    la fórmula de SKF: ν40 = A_SKF × DN^B_SKF
    """
    return A_SKF * (DN ** B_SKF)

def adjust_for_load(visc40, carga):
    """
    Ajusta la viscosidad base según el nivel de carga:
    visc_corr = viscosidad_base × factor_de_carga
    """
    return visc40 * LOAD_FACTORS[carga]

def select_NLGI(DN, visc40):
    """
    Calcula el factor de consistencia Ks = DN / viscosidad_base
    y asigna un grado NLGI según los umbrales.
    """
    Ks = DN / visc40
    for thresh, grade in NLGI_THRESHOLDS:
        if Ks <= thresh:
            return grade, Ks
    return "2", Ks  # Valor por defecto

def select_thickener(ambiente):
    """
    Elige el tipo de espesante:
    - Si hay agua o vibración, sulfonato de calcio complejo.
    - Si no, complejo de litio.
    """
    if "Agua" in ambiente or "Vibración" in ambiente:
        return "Sulfonato de calcio complejo"
    return "Complejo de litio"

# 4. Función principal de Streamlit

def main():
    st.title("Selector de Grasa para Rodamientos (SKF)")

    # Entradas del usuario
    tipo     = st.selectbox("Tipo de rodamiento", ["Bolas", "Rodillos", "Cónico", "Axial"])
    rpm      = st.number_input("Velocidad (RPM)",    min_value=0.0, value=1500.0)
    d        = st.number_input("Diámetro interior (mm)", min_value=0.0, value=50.0)
    D        = st.number_input("Diámetro exterior (mm)", min_value=0.0, value=90.0)
    temp     = st.number_input("Temperatura (°C)",   min_value=-50.0, max_value=200.0, value=60.0)
    carga    = st.selectbox("Condición de carga", list(LOAD_FACTORS.keys()))
    ambiente = st.multiselect("Ambiente", ["Agua", "Polvo", "Alta temperatura", "Vibración"])

if st.button("Calcular"):
        # Cálculos SKF
        Dm = calc_Dm(d, D)
        DN = calc_DN(rpm, Dm)
        visc40 = calc_base_viscosity(DN)
        visc_corr = adjust_for_load(visc40, carga)
        NLGI, Ks = select_NLGI(DN, visc40)
        espesante = select_thickener(ambiente)
        base = "Sintética" if temp > 100 else "Mineral"
        intervalo = int(2000 / LOAD_FACTORS[carga])

        # Mostrar resultados de forma clara
        st.subheader("Resultados SKF")
        st.write(f"• DN (n·Dm): **{DN:.0f}** mm/min")
        st.write(f"• Viscosidad base ν40: **{visc40:.1f}** cSt")
        st.write(f"• Viscosidad ajustada: **{visc_corr:.1f}** cSt")
        st.write(f"• Factor Ks: **{Ks:.1f}**")
        st.write(f"• NLGI recomendado: **{NLGI}**")
        st.write(f"• Tipo de espesante: **{espesante}**")
        st.write(f"• Tipo de base: **{base}**")
        st.write(f"• Intervalo relubricación: **{intervalo}** horas")

        # Generar PDF resumido
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(0, 10, "Selección de Grasa (SKF) - Resumen", ln=True)
        pdf.ln(5)

        lines = [
            f"Rodamiento: {tipo}",
            f"DN={DN:.0f} mm/min", f"ν40={visc40:.1f} cSt", f"Ajustada={visc_corr:.1f} cSt",
            f"Ks={Ks:.1f}, NLGI={NLGI}", f"Espesante={espesante}, Base={base}",
            f"Intervalo={intervalo} h", f"Ambiente={', '.join(ambiente) or 'Ninguno'}"
        ]
        for line in lines:
            pdf.cell(0, 8, line, ln=True)

        pdf_output = pdf.output(dest="S").encode('latin-1')
        st.download_button(
            "Descargar PDF SKF",
            data=pdf_output,
            file_name="analisis_seleccion_grasa_skf.pdf",
            mime="application/pdf"
        )

if __name__ == "__main__":
     main()

